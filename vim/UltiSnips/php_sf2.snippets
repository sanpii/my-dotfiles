snippet namespace "namespace"
namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;
endsnippet

snippet sfbundle "sfbundle"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Symfony\Component\HttpKernel\Bundle\Bundle;

class `!p snip.rv = snip.basename.capitalize()` extends Bundle
{
}
endsnippet

snippet sfclass "sfclass"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

class `!p snip.rv = snip.basename.capitalize()`
{
	${1}
}
endsnippet

snippet sfctrl "sfctrl"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Symfony\Component\HttpFoundation\Request;
use \Symfony\Bundle\FrameworkBundle\Controller\Controller;
use \Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use \Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;

class `!p snip.rv = snip.basename.capitalize()` extends Controller
{
	${1}
}
endsnippet

snippet sfaction "sfaction"
/**
 * @Template()
 */
public function ${1}Action(${2})
{
	${3}
}
endsnippet

snippet sfinterface "sfinterface"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

interface `!p snip.rv = snip.basename.capitalize()`
{
	${1}
}
endsnippet

snippet sftestcase "sftestcase"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

class `!p snip.rv = snip.basename.capitalize()` extends \PHPUnit_Framework_TestCase
{
	${1}
}
endsnippet

snippet sfentity "sfentity"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Doctrine\ORM\Mapping as ORM;
// use \Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity
 *
 * @ORM\Table(name="`tolower(!p snip.rv = snip.basename.capitalize())`")
 */
class `!p snip.rv = snip.basename.capitalize()`
{
	/**
	 * @ORM\Id
	 * @ORM\GeneratedValue(strategy="AUTO")
	 * @ORM\Column(type="integer")
	 */
	private $id;

	${1}
}
endsnippet

snippet sftype "sftype"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Symfony\Component\Form\AbstractType;
use \Symfony\Component\Form\FormBuilder;

class `!p snip.rv = snip.basename.capitalize()` extends AbstractType
{
	/**
	 * {@inheritDoc}
	 */
	public function buildForm(FormBuilder $builder, array $options)
	{
		$builder
			->add('${2}')
		;
	}

	/**
	 * {@inheritDoc}
	 */
	public function getName()
	{
		return '${1}';
	}
}
endsnippet

snippet sfcommand "sfcommand"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand;
use \Symfony\Component\Console\Input\InputInterface;
use \Symfony\Component\Console\Input\InputArgument;
use \Symfony\Component\Console\Input\InputOption;
use \Symfony\Component\Console\Output\OutputInterface;

class `!p snip.rv = snip.basename.capitalize()` extends ContainerAwareCommand
{
	/**
	 * {@inheritDoc}
	 */
	protected function configure()
	{
		$this
			->setName('${1}')
			// ->setDescription()
			// ->setHelp()
			// add some arguments:
			// ->addArgument($name, $mode = null, $description = '', $default = null)
			// and options:
			// ->addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)
		;
	}

	/**
	 * {@inheritDoc}
	 */
	protected function execute(InputInterface $input, OutputInterface $output)
	{
		${2}
	}
}
endsnippet

snippet sfdf "sfdf"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Doctrine\Common\Persistence\ObjectManager;
use \Doctrine\Common\DataFixtures\FixtureInterface;

class `!p snip.rv = snip.basename.capitalize()` implements FixtureInterface
{
	public function load(ObjectManager $em)
	{
		${1}
	}
}
endsnippet

snippet sfdfo "sfdfo"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Doctrine\Common\Persistence\ObjectManager;
use \Doctrine\Common\DataFixtures\AbstractFixture;
use \Doctrine\Common\DataFixtures\OrderedFixtureInterface;

class `!p snip.rv = snip.basename.capitalize()` extends AbstractFixture implements OrderedFixtureInterface
{
	public function load(ObjectManager $em)
	{
		${2}
	}

	public function getOrder()
	{
		return ${1};
	}
endsnippet

snippet sftwig "sftwig"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

class `!p snip.rv = snip.basename.capitalize()` extends \Twig_Extension
{
	public function getFunctions()
	{
		return array(
			'${1:}_${2:}' => new \Twig_Function_Method($this, '$2'),
		);
	}

	public function $2(${3})
	{
		${4}
	}

	public function getName()
	{
		return '$1';
	}
}
endsnippet

snippet sfdic "sfdic"
<?php

namespace `!v substitute(substitute(expand('%:h'), '/', '\\', 'g'), '^[a-z]*\\\C', '', '')`;

use \Symfony\Component\DependencyInjection\ContainerBuilder;
use \Symfony\Component\DependencyInjection\Loader\YamlFileLoader;
use \Symfony\Component\HttpKernel\DependencyInjection\Extension;
use \Symfony\Component\Config\FileLocator;

class `!p snip.rv = snip.basename.capitalize()` extends Extension
{
	public function load(array $configs, ContainerBuilder $container)
	{
		$loader = new YamlFileLoader($container, new FileLocator(__DIR__.'/../Resources/config'));
		$loader->load('${2:services.yml}');
	}

	public function getAlias()
	{
		return '${1}';
	}
}
endsnippet
